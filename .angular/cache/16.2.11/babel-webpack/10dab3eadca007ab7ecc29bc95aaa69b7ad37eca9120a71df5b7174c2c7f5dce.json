{"ast":null,"code":"import { GDLoginComponent } from 'projects/gd-login/src/lib/gd-login.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"gd-window\";\nimport * as i2 from \"@angular/common\";\nconst _c0 = function () {\n  return {\n    \"overflow\": \"hidden\",\n    \"padding\": \"2px 4px\"\n  };\n};\nexport class AppComponent {\n  constructor(windowService, locationStrategy) {\n    this.windowService = windowService;\n    this.locationStrategy = locationStrategy;\n    this.gdWindowDefualt = {\n      left: 100,\n      top: 100,\n      width: 500,\n      height: 250,\n      title: 'GD window (default)',\n      icon: './assets/icons/Window.png',\n      isIconVisible: true,\n      isIconImage: true\n    };\n  }\n  ngOnInit() {\n    let gdWindowDynamic = {\n      left: 260,\n      top: 260,\n      width: 500,\n      height: 250,\n      title: 'GD window (dynamic)',\n      icon: './assets/icons/Window.png',\n      isIconVisible: true,\n      isIconImage: true\n    };\n    this.windowService.open(null, this.whenDynamicIsReady.bind(this), {\n      windowConfig: gdWindowDynamic,\n      childData: undefined\n    });\n    let x = 840;\n    let y = 100;\n    let w = 800;\n    let h = 400;\n    let gdWindowParent = {\n      left: x,\n      top: y,\n      width: w,\n      height: h,\n      title: 'GD window (modal parent)',\n      icon: './assets/icons/Window.png',\n      isIconVisible: true,\n      isIconImage: true\n    };\n    let parent = this.windowService.open(null, this.whenDynamicIsReady.bind(this), {\n      windowConfig: gdWindowParent,\n      childData: undefined\n    });\n    let wLogin = 270;\n    let hLogin = 168;\n    // modal should have parent ID\n    let gdLoginWindow = {\n      parentID: parent.ID,\n      modalParentRect: {\n        left: x - 1,\n        top: y - 1,\n        width: w + 3,\n        height: h + 3\n      },\n      isModal: true,\n      childMakesDecisionToClose: true,\n      left: x + (w - wLogin) / 2,\n      top: y + (h - hLogin) / 2,\n      z: 45,\n      width: wLogin,\n      height: hLogin,\n      title: 'Login',\n      footer: '',\n      icon: './assets/icons/User.png',\n      isIconVisible: true,\n      isIconImage: true,\n      ok: 'Login',\n      cancel: 'Cancel',\n      whenOKClick: data => {},\n      whenCancelClick: data => {}\n    };\n    this.windowService.open(GDLoginComponent, this.whenLoginIsReady.bind(this), {\n      windowConfig: gdLoginWindow,\n      childData: undefined\n    });\n  }\n  ngAfterViewInit() {\n    // dissable back navigation button\n    history.pushState(null, '', location.href);\n    this.locationStrategy.onPopState(() => {\n      history.pushState(null, '', location.href);\n    });\n    // disable browser contextmenu\n    document.addEventListener('contextmenu', event => event.preventDefault());\n    window.addEventListener('beforeunload', event => {\n      alert('Bad idea to close');\n    });\n  }\n  whenDynamicIsReady(window, child) {\n    let divNode = document.createElement('div');\n    divNode.style.margin = '4px 10px';\n    divNode.innerHTML = `<br>\n            <b>Window exapmple created dynamically in code</b><br>\n            <br>\n            Some plain test or html or Component<br>\n            Some plain test or html or Component<br>\n            Some plain test or html or Component<br>\n            Some plain test or html or Component<br>\n            Some plain test or html or Component<br>\n            Some plain test or html or Component<br>\n            Some plain test or html or Component<br>\n            Some plain test or html or Component<br>\n            Some plain test or html or Component<br>\n            Some plain test or html or Component<br>\n            Some plain test or html or Component<br>\n            Some plain test or html or Component<br>\n            Some plain test or html or Component<br>`;\n    child.el.nativeElement.appendChild(divNode);\n  }\n  whenLoginIsReady(window, child) {}\n  static #_ = this.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.GDWindowService), i0.ɵɵdirectiveInject(i2.LocationStrategy));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"app-root\"]],\n    decls: 33,\n    vars: 3,\n    consts: [[3, \"Config\"], [3, \"ngStyle\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"gd-window\", 0)(1, \"div\", 1);\n        i0.ɵɵelement(2, \"br\");\n        i0.ɵɵelementStart(3, \"b\");\n        i0.ɵɵtext(4, \"Window exapmple defined in template\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(5, \"br\")(6, \"br\");\n        i0.ɵɵtext(7, \" Some plain test or html or Component\");\n        i0.ɵɵelement(8, \"br\");\n        i0.ɵɵtext(9, \" Some plain test or html or Component\");\n        i0.ɵɵelement(10, \"br\");\n        i0.ɵɵtext(11, \" Some plain test or html or Component\");\n        i0.ɵɵelement(12, \"br\");\n        i0.ɵɵtext(13, \" Some plain test or html or Component\");\n        i0.ɵɵelement(14, \"br\");\n        i0.ɵɵtext(15, \" Some plain test or html or Component\");\n        i0.ɵɵelement(16, \"br\");\n        i0.ɵɵtext(17, \" Some plain test or html or Component\");\n        i0.ɵɵelement(18, \"br\");\n        i0.ɵɵtext(19, \" Some plain test or html or Component\");\n        i0.ɵɵelement(20, \"br\");\n        i0.ɵɵtext(21, \" Some plain test or html or Component\");\n        i0.ɵɵelement(22, \"br\");\n        i0.ɵɵtext(23, \" Some plain test or html or Component\");\n        i0.ɵɵelement(24, \"br\");\n        i0.ɵɵtext(25, \" Some plain test or html or Component\");\n        i0.ɵɵelement(26, \"br\");\n        i0.ɵɵtext(27, \" Some plain test or html or Component\");\n        i0.ɵɵelement(28, \"br\");\n        i0.ɵɵtext(29, \" Some plain test or html or Component\");\n        i0.ɵɵelement(30, \"br\");\n        i0.ɵɵtext(31, \" Some plain test or html or Component\");\n        i0.ɵɵelement(32, \"br\");\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"Config\", ctx.gdWindowDefualt);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngStyle\", i0.ɵɵpureFunction0(2, _c0));\n      }\n    },\n    dependencies: [i2.NgStyle, i1.GDWindowComponent],\n    styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"names":["GDLoginComponent","AppComponent","constructor","windowService","locationStrategy","gdWindowDefualt","left","top","width","height","title","icon","isIconVisible","isIconImage","ngOnInit","gdWindowDynamic","open","whenDynamicIsReady","bind","windowConfig","childData","undefined","x","y","w","h","gdWindowParent","parent","wLogin","hLogin","gdLoginWindow","parentID","ID","modalParentRect","isModal","childMakesDecisionToClose","z","footer","ok","cancel","whenOKClick","data","whenCancelClick","whenLoginIsReady","ngAfterViewInit","history","pushState","location","href","onPopState","document","addEventListener","event","preventDefault","window","alert","child","divNode","createElement","style","margin","innerHTML","el","nativeElement","appendChild","_","i0","ɵɵdirectiveInject","i1","GDWindowService","i2","LocationStrategy","_2","selectors","decls","vars","consts","template","AppComponent_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵtext","ɵɵelementEnd","ɵɵproperty","ɵɵadvance","ɵɵpureFunction0","_c0"],"sources":["C:\\Users\\dovga\\source\\repos\\gd-window-example\\projects\\gd-app\\src\\app\\app.component.ts","C:\\Users\\dovga\\source\\repos\\gd-window-example\\projects\\gd-app\\src\\app\\app.component.html"],"sourcesContent":["import { Component          } from '@angular/core';\nimport { LocationStrategy   } from '@angular/common';\nimport { GDWindowService    } from 'gd-window';\nimport { GDWindowComponent  } from 'gd-window';\nimport { IGDWindowConfig    } from 'gd-window';\nimport { GDLoginComponent   } from 'projects/gd-login/src/lib/gd-login.component';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent\n{\n    public gdWindowDefualt : IGDWindowConfig = \n    {\n        left          : 100,\n        top           : 100,\n        width         : 500,\n        height        : 250,\n        title         : 'GD window (default)',\n        icon          : './assets/icons/Window.png',\n        isIconVisible : true,\n        isIconImage   : true\n    };  \n\n    constructor( private windowService: GDWindowService, \n                 private locationStrategy: LocationStrategy )\n    {\n    }\n\n    public  ngOnInit() : void\n    {\n        let gdWindowDynamic : IGDWindowConfig = \n        {\n            left        : 260,\n            top         : 260,\n            width       : 500,\n            height      : 250,\n            title       : 'GD window (dynamic)',\n            icon        : './assets/icons/Window.png',\n            isIconVisible : true,\n            isIconImage   : true\n        };  \n    \n        this.windowService.open( null, this.whenDynamicIsReady.bind(this), \n        { \n           windowConfig : gdWindowDynamic, \n           childData    : undefined \n        });\n\n        let x = 840;\n        let y = 100;\n        let w = 800;\n        let h = 400;\n\n        let gdWindowParent : IGDWindowConfig = \n        {\n            left          : x,\n            top           : y,\n            width         : w,\n            height        : h,\n            title         : 'GD window (modal parent)',\n            icon          : './assets/icons/Window.png',\n            isIconVisible : true,\n            isIconImage   : true\n        };  \n\n        let parent = this.windowService.open( null, this.whenDynamicIsReady.bind(this), \n        { \n           windowConfig : gdWindowParent, \n           childData    : undefined \n        });\n\n        let wLogin = 270;\n        let hLogin = 168;\n\n        // modal should have parent ID\n        let gdLoginWindow : IGDWindowConfig = \n        {\n            parentID                  : parent.ID,\n            modalParentRect           : { left : x-1, top : y-1, width : w+3, height : h+3 },\n            isModal                   : true,\n            childMakesDecisionToClose : true,\n            left                      : x + (w - wLogin)/2,\n            top                       : y + (h - hLogin)/2,\n            z                         : 45,\n            width                     : wLogin,\n            height                    : hLogin,\n            title                     : 'Login',\n            footer                    : '',\n            icon                      : './assets/icons/User.png',\n            isIconVisible             : true,\n            isIconImage               : true,\n            ok                        : 'Login',\n            cancel                    : 'Cancel',\n            whenOKClick               : (data:any) => {},\n            whenCancelClick           : (data:any) => {}\n        }\n\n        this.windowService.open( GDLoginComponent, this.whenLoginIsReady.bind(this), \n        { \n           windowConfig : gdLoginWindow, \n           childData    : undefined \n        });\n    }\n\n    public  ngAfterViewInit() : void\n    {\n        // dissable back navigation button\n                                                  history.pushState( null, '', location.href );\n        this.locationStrategy.onPopState( () => { history.pushState( null, '', location.href ); });\n\n        // disable browser contextmenu\n        document.addEventListener( 'contextmenu',  (event : any) => event.preventDefault() );  \n        window  .addEventListener( 'beforeunload', (event : any) => { alert('Bad idea to close'); } );   \n    }\n\n    private whenDynamicIsReady( window : GDWindowComponent, child : any )   \n    {\n        let divNode = document.createElement('div');\n            divNode.style.margin = '4px 10px'; \n            divNode.innerHTML =       \n            `<br>\n            <b>Window exapmple created dynamically in code</b><br>\n            <br>\n            Some plain test or html or Component<br>\n            Some plain test or html or Component<br>\n            Some plain test or html or Component<br>\n            Some plain test or html or Component<br>\n            Some plain test or html or Component<br>\n            Some plain test or html or Component<br>\n            Some plain test or html or Component<br>\n            Some plain test or html or Component<br>\n            Some plain test or html or Component<br>\n            Some plain test or html or Component<br>\n            Some plain test or html or Component<br>\n            Some plain test or html or Component<br>\n            Some plain test or html or Component<br>`;\n\n        (child.el.nativeElement as HTMLElement).appendChild(divNode);\n    }    \n\n    private whenLoginIsReady( window : GDWindowComponent, child : any )   \n    {\n    }    \n}\n","<gd-window [Config]=\"gdWindowDefualt\"> \n    <div [ngStyle]=\"{ \n        'overflow' : 'hidden', \n        'padding'  : '2px 4px' \n      }\">\n      <br>\n      <b>Window exapmple defined in template</b><br>\n      <br>\n      Some plain test or html or Component<br>\n      Some plain test or html or Component<br>\n      Some plain test or html or Component<br>\n      Some plain test or html or Component<br>\n      Some plain test or html or Component<br>\n      Some plain test or html or Component<br>\n      Some plain test or html or Component<br>\n      Some plain test or html or Component<br>\n      Some plain test or html or Component<br>\n      Some plain test or html or Component<br>\n      Some plain test or html or Component<br>\n      Some plain test or html or Component<br>\n      Some plain test or html or Component<br>\n    </div>\n</gd-window>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}