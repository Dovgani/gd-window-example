{"ast":null,"code":"import { Buttons } from 'gd-window';\nimport { ContentResponce } from 'gd-window';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./gd-login.service\";\nimport * as i2 from \"@angular/forms\";\nexport class GDLoginComponent {\n  get Window() {\n    return this.window;\n  }\n  set Window(value) {\n    this.window = value;\n  }\n  constructor(dataService) {\n    this.dataService = dataService;\n    this.remember = false;\n    this.passwordKeeper = '';\n    this.password = '';\n    this.userKeeper = '';\n    this.user = '';\n    this.message = '';\n    this.windowActionNotifier = null;\n    this.subscriptionWindowAction = null;\n    this.hadBackendIsDown = false;\n    this.message = '';\n    this.user = 'Paul';\n    this.password = '123';\n  }\n  ngAfterViewInit() {\n    if (this.windowActionNotifier) {\n      this.subscriptionWindowAction = this.windowActionNotifier.subscribe(windowAction => {\n        this.ParentWindowAction(windowAction);\n      });\n    }\n    var data = localStorage.getItem('loginInfo');\n    if (data) {\n      this.userKeeper = this.user = data['user'];\n      this.passwordKeeper = this.password = data['password'];\n      this.remember = true;\n    }\n  }\n  ngOnDestroy() {\n    this.subscriptionWindowAction?.unsubscribe();\n  }\n  onKeyPress(event) {\n    if (event.key !== 'Enter') return;\n    //    if( event.currentTarget.id === 'userName'     ) $('#userPassword').focus();\n    //    if( event.currentTarget.id === 'userPassword' ) $('#loginBtn'    ).focus();\n  }\n  onLogin(windowAction) {\n    if (this.remember) {\n      if (this.user !== this.userKeeper || this.password !== this.passwordKeeper) {\n        localStorage.setItem('loginInfo', JSON.stringify({\n          'user': this.user,\n          'password': this.password\n        }));\n      }\n    } else {\n      localStorage.removeItem('loginInfo');\n    }\n    this.checkPassword(this.user, this.password, windowAction);\n  }\n  checkPassword(user, password, windowAction) {\n    this.dataService.checkPassword(user, password).subscribe({\n      next: data => this.OnLoadComplated_CheckPassword(data, windowAction),\n      error: err => this.onRequestError(err, 'checkPassword')\n    });\n  }\n  OnLoadComplated_CheckPassword(data, windowAction) {\n    let responce = new ContentResponce(windowAction.action, windowAction.windowID, windowAction.windowName, data, 'OK', '', true, 500);\n    windowAction.cb(responce);\n  }\n  ParentWindowAction(windowAction) {\n    if (windowAction.windowID !== this.window.ID) return;\n    var responce = new ContentResponce(windowAction.action, windowAction.windowID, windowAction.windowName, null, 'OK', '', true);\n    switch (windowAction.action) {\n      case Buttons.close:\n        {\n          windowAction.cb(responce);\n        }\n        break;\n      case Buttons.minimaze:\n        {\n          windowAction.cb(responce);\n        }\n        break;\n      case Buttons.ok:\n        {\n          this.onLogin(windowAction);\n        }\n        break;\n      case Buttons.cancel:\n        {\n          windowAction.cb(responce);\n        }\n        break;\n      case Buttons.footer:\n        {\n          windowAction.cb(responce);\n        }\n        break;\n      default:\n        {\n          responce.result = '';\n          windowAction.cb(responce);\n        }\n        break;\n    }\n  }\n  onRequestError(error, action = 'action') {\n    if (error.message === 'Backend is down') {\n      if (this.hadBackendIsDown) return;\n      this.hadBackendIsDown = true;\n      action = 'Backend is down.';\n      error.message = 'Please contact support for help';\n    }\n    // to use this you have to install gd-slide-message component \n    // this.messageService.Add({ type : 'error', header: 'Error', content : [action, error.message]});\n  }\n  static #_ = this.ɵfac = function GDLoginComponent_Factory(t) {\n    return new (t || GDLoginComponent)(i0.ɵɵdirectiveInject(i1.GDLoginService));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: GDLoginComponent,\n    selectors: [[\"gd-login\"]],\n    inputs: {\n      windowActionNotifier: \"windowActionNotifier\",\n      Window: \"Window\"\n    },\n    decls: 23,\n    vars: 4,\n    consts: [[2, \"padding\", \"5px 5px 0 0\"], [2, \"padding\", \"1px 2px 0 2px\"], [2, \"width\", \"100%\"], [2, \"height\", \"28px\"], [\"width\", \"90px\", 2, \"font-size\", \"14px\", \"font-style\", \"normal\"], [\"id\", \"userName\", \"type\", \"text\", 1, \"stringInput\", 3, \"ngModel\", \"ngModelChange\", \"keypress\"], [\"id\", \"userPassword\", \"type\", \"password\", 1, \"stringInput\", 3, \"ngModel\", \"ngModelChange\", \"keypress\"], [2, \"font-size\", \"10px\", \"vertical-align\", \"top\"], [\"type\", \"checkbox\", 3, \"ngModel\", \"ngModelChange\"], [2, \"display\", \"inline-block\", \"font-size\", \"11px\", \"padding\", \"3px 0 0 4px\"]],\n    template: function GDLoginComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\")(2, \"div\", 1)(3, \"table\", 2)(4, \"tr\", 3)(5, \"td\", 4);\n        i0.ɵɵtext(6, \"User Name\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(7, \"td\")(8, \"input\", 5);\n        i0.ɵɵlistener(\"ngModelChange\", function GDLoginComponent_Template_input_ngModelChange_8_listener($event) {\n          return ctx.user = $event;\n        })(\"keypress\", function GDLoginComponent_Template_input_keypress_8_listener($event) {\n          return ctx.onKeyPress($event);\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(9, \"tr\", 3)(10, \"td\", 4);\n        i0.ɵɵtext(11, \"Password\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(12, \"td\")(13, \"input\", 6);\n        i0.ɵɵlistener(\"ngModelChange\", function GDLoginComponent_Template_input_ngModelChange_13_listener($event) {\n          return ctx.password = $event;\n        })(\"keypress\", function GDLoginComponent_Template_input_keypress_13_listener($event) {\n          return ctx.onKeyPress($event);\n        });\n        i0.ɵɵelementEnd()()();\n        i0.ɵɵelementStart(14, \"tr\", 3)(15, \"td\")(16, \"label\", 7)(17, \"input\", 8);\n        i0.ɵɵlistener(\"ngModelChange\", function GDLoginComponent_Template_input_ngModelChange_17_listener($event) {\n          return ctx.remember = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(18, \"span\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(19, \"span\", 9);\n        i0.ɵɵtext(20, \"Remember Me.\");\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(21, \"td\");\n        i0.ɵɵtext(22);\n        i0.ɵɵelementEnd()()()()()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(8);\n        i0.ɵɵproperty(\"ngModel\", ctx.user);\n        i0.ɵɵadvance(5);\n        i0.ɵɵproperty(\"ngModel\", ctx.password);\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"ngModel\", ctx.remember);\n        i0.ɵɵadvance(5);\n        i0.ɵɵtextInterpolate1(\" \", ctx.message, \" \");\n      }\n    },\n    dependencies: [i2.DefaultValueAccessor, i2.CheckboxControlValueAccessor, i2.NgControlStatus, i2.NgModel],\n    styles: [\".login-button[_ngcontent-%COMP%] {\\n  margin: 0 0 0 7px;\\n  float: right;\\n  height: 24px;\\n  width: 77px;\\n  color: rgb(100, 100, 100);\\n  border: 1px solid #bbb;\\n  border-radius: 3px;\\n  cursor: default;\\n}\\n.login-button[_ngcontent-%COMP%]:hover {\\n  background: #ccc;\\n  cursor: pointer;\\n}\\n\\n\\n\\ninput.stringInput[_ngcontent-%COMP%] {\\n  text-align: left;\\n  background: rgb(245, 245, 245);\\n  height: 24px;\\n  width: 100%;\\n  border: 1px solid #bbb;\\n  font-style: italic;\\n  border-radius: 3px;\\n  padding: 0 0 0 4px;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3Byb2plY3RzL2dkLWxvZ2luL3NyYy9saWIvZ2QtbG9naW4uY29tcG9uZW50LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7RUFFSSxpQkFBQTtFQUNBLFlBQUE7RUFDQSxZQUFBO0VBQ0EsV0FBQTtFQUNBLHlCQUFBO0VBQ0Esc0JBQUE7RUFDQSxrQkFBQTtFQUNBLGVBQUE7QUFBSjtBQUVJO0VBRUksZ0JBQUE7RUFDQSxlQUFBO0FBRFI7O0FBS0EsWUFBQTtBQUVBO0VBRUksZ0JBQUE7RUFDQSw4QkFBQTtFQUNBLFlBQUE7RUFDQSxXQUFBO0VBQ0Esc0JBQUE7RUFDQSxrQkFBQTtFQUNBLGtCQUFBO0VBQ0Esa0JBQUE7QUFKSiIsInNvdXJjZXNDb250ZW50IjpbIi5sb2dpbi1idXR0b25cbntcbiAgICBtYXJnaW4gIDogMCAwIDAgN3B4O1xuICAgIGZsb2F0ICAgOiByaWdodDtcbiAgICBoZWlnaHQgIDogMjRweDtcbiAgICB3aWR0aCAgIDogNzdweDtcbiAgICBjb2xvciAgIDogcmdiKDEwMCwgMTAwLCAxMDApO1xuICAgIGJvcmRlciAgOiAxcHggc29saWQgI2JiYjtcbiAgICBib3JkZXItcmFkaXVzOiAzcHg7XG4gICAgY3Vyc29yICA6IGRlZmF1bHQ7XG5cbiAgICAmOmhvdmVyXG4gICAge1xuICAgICAgICBiYWNrZ3JvdW5kIDogI2NjYztcbiAgICAgICAgY3Vyc29yICAgICA6IHBvaW50ZXI7XG4gICAgfVxufVxuXG4vKioqKioqKioqKiovXG5cbmlucHV0LnN0cmluZ0lucHV0XG57XG4gICAgdGV4dC1hbGlnbjpsZWZ0O1xuICAgIGJhY2tncm91bmQ6IHJnYigyNDUsIDI0NSwgMjQ1KTtcbiAgICBoZWlnaHQgICAgOiAyNHB4O1xuICAgIHdpZHRoICAgICA6IDEwMCU7XG4gICAgYm9yZGVyICAgIDogMXB4IHNvbGlkICNiYmI7XG4gICAgZm9udC1zdHlsZTppdGFsaWM7XG4gICAgYm9yZGVyLXJhZGl1czozcHg7XG4gICAgcGFkZGluZyAgIDogMCAwIDAgNHB4XG59XG4iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n  });\n}","map":{"version":3,"names":["Buttons","ContentResponce","GDLoginComponent","Window","window","value","constructor","dataService","remember","passwordKeeper","password","userKeeper","user","message","windowActionNotifier","subscriptionWindowAction","hadBackendIsDown","ngAfterViewInit","subscribe","windowAction","ParentWindowAction","data","localStorage","getItem","ngOnDestroy","unsubscribe","onKeyPress","event","key","onLogin","setItem","JSON","stringify","removeItem","checkPassword","next","OnLoadComplated_CheckPassword","error","err","onRequestError","responce","action","windowID","windowName","cb","ID","close","minimaze","ok","cancel","footer","result","_","i0","ɵɵdirectiveInject","i1","GDLoginService","_2","selectors","inputs","decls","vars","consts","template","GDLoginComponent_Template","rf","ctx","ɵɵelementStart","ɵɵtext","ɵɵelementEnd","ɵɵlistener","GDLoginComponent_Template_input_ngModelChange_8_listener","$event","GDLoginComponent_Template_input_keypress_8_listener","GDLoginComponent_Template_input_ngModelChange_13_listener","GDLoginComponent_Template_input_keypress_13_listener","GDLoginComponent_Template_input_ngModelChange_17_listener","ɵɵelement","ɵɵadvance","ɵɵproperty","ɵɵtextInterpolate1"],"sources":["C:\\Users\\dovga\\source\\repos\\gd-window-example\\projects\\gd-login\\src\\lib\\gd-login.component.ts","C:\\Users\\dovga\\source\\repos\\gd-window-example\\projects\\gd-login\\src\\lib\\gd-login.component.html"],"sourcesContent":["import { Component, OnDestroy   } from '@angular/core';\nimport { AfterViewInit          } from '@angular/core';\nimport { Input                  } from '@angular/core';\nimport { GDLoginService         } from './gd-login.service';\nimport { Buttons                } from 'gd-window';\nimport { IWindowAction          } from 'gd-window';\nimport { IGDWindowChild         } from 'gd-window';\nimport { ContentResponce        } from 'gd-window';\nimport { Subject, Subscription  } from 'rxjs';\n\n@Component({\n    selector:    'gd-login',\n    templateUrl: './gd-login.component.html',\n    styleUrls:  ['./gd-login.component.scss'],\n})\nexport class GDLoginComponent implements AfterViewInit, OnDestroy, IGDWindowChild\n{\n    public  remember       : any    = false;\n    private passwordKeeper : string = '';\n    public  password       : string = '';\n    public  userKeeper     : string = '';\n    public  user           : string = '';\n    public  message        : string = '';\n    \n    @Input() windowActionNotifier     : Subject<IWindowAction> | null = null;\n    private  subscriptionWindowAction : Subscription           | null = null;\n\n    private    window        : any;\n    public get Window()      : any   { return this.window;         }\n    @Input() \n    public set Window( value : any ) {        this.window = value; }\n\n    constructor( private dataService: GDLoginService )\n    {\n        this.message  = '';\n        this.user     = 'Paul';\n        this.password = '123';\n    }\n\n    public  ngAfterViewInit()\n    {\n        if( this.windowActionNotifier )\n        {\n            this.subscriptionWindowAction = this.windowActionNotifier.subscribe( (windowAction : IWindowAction) => \n            {\n                this.ParentWindowAction( windowAction );\n            });\n        }\n\n        var data = localStorage.getItem( 'loginInfo' );\n        if( data )\n        {\n            this.userKeeper     = this.user     = (data as any)['user'];\n            this.passwordKeeper = this.password = (data as any)['password'];\n            this.remember       = true;\n        }\n    }\n\n    public ngOnDestroy()\n    {\n        this.subscriptionWindowAction?.unsubscribe();\n    }\n\n    public  onKeyPress( event: any ): void\n    {\n        if( event.key              !== 'Enter'        ) return;\n    //    if( event.currentTarget.id === 'userName'     ) $('#userPassword').focus();\n    //    if( event.currentTarget.id === 'userPassword' ) $('#loginBtn'    ).focus();\n    }\n\n    public  onLogin( windowAction : IWindowAction )\n    {\n        if( this.remember )\n        {\n            if( this.user !== this.userKeeper || this.password !== this.passwordKeeper )\n            {\n                localStorage.setItem( 'loginInfo', JSON.stringify({ 'user': this.user, 'password': this.password }) );\n            }\n        }\n        else\n        {\n            localStorage.removeItem( 'loginInfo' );\n        }\n\n        this.checkPassword( this.user, this.password, windowAction );\n    }\n\n    private checkPassword( user : string, password : string, windowAction : IWindowAction )\n    {\n        this.dataService.checkPassword(user, password).subscribe(\n        {\n            next : data => this.OnLoadComplated_CheckPassword( data, windowAction ),\n            error: err  => this.onRequestError( err, 'checkPassword' )\n        });\n    }\n\n    private OnLoadComplated_CheckPassword( data : any, windowAction : IWindowAction )\n    {\n        let              responce = new ContentResponce(windowAction.action, windowAction.windowID, windowAction.windowName, data, 'OK', '', true, 500);\n        windowAction.cb( responce );\n    }\n\n    public  ParentWindowAction( windowAction : IWindowAction ) \n    {\n        if( windowAction.windowID !== this.window.ID ) return;\n\n        var responce = new ContentResponce( windowAction.action, windowAction.windowID, windowAction.windowName, null, 'OK', '', true );\n\n        switch( windowAction.action ) \n        {\n            case Buttons.close    : {                       windowAction.cb( responce ); }  break;\n            case Buttons.minimaze : {                       windowAction.cb( responce ); }  break;\n            case Buttons.ok       : { this.onLogin(windowAction);                        }  break;\n            case Buttons.cancel   : {                       windowAction.cb( responce ); }  break;\n            case Buttons.footer   : {                       windowAction.cb( responce ); }  break;\n            default               : { responce.result = ''; windowAction.cb( responce ); }  break;\n        }\n    }  \n\n    private hadBackendIsDown = false;\n\n    private onRequestError( error: any, action = 'action' )\n    {\n        if( error.message === 'Backend is down' )\n        {\n            if( this.hadBackendIsDown ) return;\n                this.hadBackendIsDown = true;\n\n            action        = 'Backend is down.';\n            error.message = 'Please contact support for help';\n        }\n       // to use this you have to install gd-slide-message component \n       // this.messageService.Add({ type : 'error', header: 'Error', content : [action, error.message]});\n    }\n}\n","<div style=\"padding: 5px 5px 0 0;\">\n\n    <div>\n        <div style=\"padding: 1px 2px 0 2px\">\n            <table style=\"width:100%;\">\n                <tr style=\"height:28px\">\n                    <td width=90px style=\"font-size:14px; font-style:normal;\">User Name</td>\n                    <td><input id=\"userName\" class=\"stringInput\" type=\"text\" [(ngModel)]=\"user\" (keypress)=\"onKeyPress($event)\"></td>\n                </tr>\n                <tr style=\"height:28px\">\n                    <td width=90px style=\"font-size:14px; font-style:normal;\">Password</td>\n                    <td><input id=\"userPassword\" class=\"stringInput\" type=\"password\" [(ngModel)]=\"password\" (keypress)=\"onKeyPress($event)\"></td>\n                </tr>\n                <tr style=\"height:28px;\">\n                    <td>\n                        <label style=\"font-size: 10px; vertical-align: top;\">\n                            <input type='checkbox' [(ngModel)]=\"remember\" >\n                            <span></span>\n                        </label>\n                        <span style=\"display:inline-block; font-size: 11px; padding: 3px 0 0 4px;\">Remember Me.</span>\n                    </td>\n                    <td>\n                        {{message}}\n                    </td>\n                </tr>\n            </table>\n        </div>\n    </div>\n\n</div>\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}